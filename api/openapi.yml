openapi: 3.0.3
info:
  title: Random Affirmations API (RAfAPI) - OpenAPI 3.0
  description: |-
    This is a sample API which offers random affirmations. The returned content gets composed of random affirmation sentences selected from the requested categories. It is possible to govern both the categories and the component affirmation sentences.
  version: 1.0.1
servers:
  - url: http://localhost:5000
    description: Your local instance
paths:
  /random_affirmation:
    get:
      summary: Get the random affirmation
      description: Returns a random set of affirmation sentences selected from the given categories
      operationId: getRandomAffirmation
      parameters:
        - $ref: "#/components/parameters/categoryIds"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/ResponseStatus"
                  data:
                    $ref: "#/components/schemas/RandomAffirmation"
                  count:
                    $ref: "#/components/schemas/ResponseDataCount"
        "400":
          $ref: "#/components/responses/400BadRequest"
  /affirmations:
    get:
      summary: Get a list of all available affirmation sentences
      description: Returns the full list of all available affirmation sentences
      operationId: getAffirmations
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/ResponseStatus"
                  data:
                    $ref: "#/components/schemas/Affirmation"
                  count:
                    $ref: "#/components/schemas/ResponseDataCount"
    post:
      summary: Create an affirmation sentence
      description: Creates a new affirmation sentence with the given content and assigned category
      operationId: createAffirmation
      requestBody:
        $ref: "#/components/requestBodies/AffirmationRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/ResponseStatus"
                  data:
                    $ref: "#/components/schemas/AffirmationId"
                  count:
                    $ref: "#/components/schemas/ResponseDataCount"
        "422":
          $ref: "#/components/responses/422UnprocessableEntity"
  /affirmations/{affirmationId}:
    get:
      summary: Get an affirmation sentence by id
      description: Returns a single affirmation sentence identified by id
      operationId: getAffirmationById
      parameters:
        - $ref: "#/components/parameters/affirmationId"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/ResponseStatus"
                  data:
                    $ref: "#/components/schemas/Affirmation"
                  count:
                    $ref: "#/components/schemas/ResponseDataCount"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "404":
          $ref: "#/components/responses/404NotFound"
    put:
      summary: Update an affirmation sentence by id
      description: Updates an affirmation sentence identified by id with the provided data
      operationId: updateAffirmation
      parameters:
        - $ref: "#/components/parameters/affirmationId"
      requestBody:
        $ref: "#/components/requestBodies/AffirmationRequest"
      responses:
        "200":
          $ref: "#/components/responses/200NoContent"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "422":
          $ref: "#/components/responses/422UnprocessableEntity"
    delete:
      summary: Delete an affirmation sentence by id
      description: Deletes an affirmation sentence identified by id
      operationId: deleteAffirmation
      parameters:
        - $ref: "#/components/parameters/affirmationId"
      responses:
        "200":
          $ref: "#/components/responses/200NoContent"
        "400":
          $ref: "#/components/responses/400BadRequest"
  /categories:
    get:
      summary: Get a list of all available categories
      description: Returns the full list of all available categories
      operationId: getCategories
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/ResponseStatus"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Category"
                  count:
                    $ref: "#/components/schemas/ResponseDataCount"
    post:
      summary: Create category
      description: Creates a new category with the given name
      operationId: createCategory
      requestBody:
        $ref: "#/components/requestBodies/CategoryRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/ResponseStatus"
                  data:
                    $ref: "#/components/schemas/CategoryId"
                  count:
                    $ref: "#/components/schemas/ResponseDataCount"
        "422":
          $ref: "#/components/responses/422UnprocessableEntity"
  /categories/{categoryId}:
    get:
      summary: Get a category by id
      description: Returns a single category identified by id
      operationId: getCategoryById
      parameters:
        - $ref: "#/components/parameters/categoryId"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/ResponseStatus"
                  data:
                    $ref: "#/components/schemas/Category"
                  count:
                    $ref: "#/components/schemas/ResponseDataCount"
        "404":
          $ref: "#/components/responses/404NotFound"
    put:
      summary: Update a category by id
      description: Updates a category identified by id with the provided data
      operationId: updateCategory
      parameters:
        - $ref: "#/components/parameters/categoryId"
      requestBody:
        $ref: "#/components/requestBodies/CategoryRequest"
      responses:
        "200":
          $ref: "#/components/responses/200NoContent"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "422":
          $ref: "#/components/responses/422UnprocessableEntity"
    delete:
      summary: Delete a category by id
      description: Deletes a category identified by id
      operationId: deleteCategory
      parameters:
        - $ref: "#/components/parameters/categoryId"
      responses:
        "200":
          $ref: "#/components/responses/200NoContent"
        "400":
          $ref: "#/components/responses/400BadRequest"

components:
  schemas:
    RandomAffirmation:
      type: object
      properties:
        text:
          $ref: "#/components/schemas/AffirmationText"
      required:
        - text
    AffirmationId:
      type: integer
      format: int64
      minimum: 1
      example: 1
    AffirmationText:
      type: string
      minLength: 1
      example: I am smart.
    AffirmationDateTime:
      type: string
      format: date-time
      example: "2022-09-11T17:32:28Z"
    Affirmation:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/AffirmationId"
        text:
          $ref: "#/components/schemas/AffirmationText"
        categoryId:
          $ref: "#/components/schemas/CategoryId"
        createdAt:
          $ref: "#/components/schemas/AffirmationDateTime"
        updatedAt:
          $ref: "#/components/schemas/AffirmationDateTime"
      required:
        - id
        - text
        - categoryId
        - createdAt
        - updatedAt
    CategoryId:
      type: integer
      format: int64
      minimum: 1
      example: 1
    CategoryName:
      type: string
      minLength: 1
      example: Health
    Category:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/CategoryId"
        name:
          $ref: "#/components/schemas/CategoryName"
      required:
        - id
        - name

    ResponseStatus:
      type: string
      enum: [OK, ERROR]
    ResponseEmptyData:
      type: array
      items: {}
      maxItems: 0
    ResponseDataCount:
      type: integer
      minimum: 0
      example: 1
    ResponseErrorMessage:
      type: string
      example: Not found
    OkEmptyResponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/ResponseStatus"
        data:
          $ref: "#/components/schemas/ResponseEmptyData"
        count:
          $ref: "#/components/schemas/ResponseDataCount"
      required:
        - status
        - data
        - count
    ErrorResponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/ResponseStatus"
        message:
          $ref: "#/components/schemas/ResponseErrorMessage"
      required:
        - status
        - message

  parameters:
    affirmationId:
      name: affirmationId
      in: path
      description: ID of the affirmation
      required: true
      schema:
        $ref: "#/components/schemas/AffirmationId"
    categoryId:
      name: categoryId
      in: path
      description: ID of the category
      required: true
      schema:
        $ref: "#/components/schemas/CategoryId"
    categoryIds:
      name: categoryIds
      in: query
      description: A list of category IDs
      required: true
      schema:
        type: array
        items:
          type: integer
        uniqueItems: true
        minItems: 1
        example: [1, 2, 3]

  requestBodies:
    AffirmationRequest:
      description: Request containing affirmation sentence details to be inserted to/updated in the database
      content:
        application/json:
          schema:
            required:
              - text
              - categoryId
            type: object
            properties:
              text:
                $ref: "#/components/schemas/AffirmationText"
              categoryId:
                $ref: "#/components/schemas/CategoryId"
    CategoryRequest:
      description: Request containing category details to be inserted to/updated in the database
      content:
        application/json:
          schema:
            required:
              - name
            type: object
            properties:
              name:
                $ref: "#/components/schemas/CategoryName"

  responses:
    200NoContent:
      description: The specified operation was successful and there is no data to return
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OkEmptyResponse"
    400BadRequest:
      description: The specified request cannot be processed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    404NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    422UnprocessableEntity:
      description: The specified request paylaod cannot be processed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    500InternalServerError:
      description: There was an internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
